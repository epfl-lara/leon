import leon.Utils._

object HardChains {
  
  abstract class List
  case class Cons(head: Int, tail: List) extends List
  case class Nil extends List

  def f1(list: List): List = list match {
    case Cons(head, tail) if head > 0 => f2(list)
    case Cons(head, tail) if head < 0 => f3(list)
    case Nil() => Nil()
    case _ => f4(list)
  }

  def f2(list: List): List = list match {
    case Cons(head, tail) if head > 0 => f4(Cons(0, list))
    case _ => f1(list)
  }

  def f3(list: List): List = list match {
    case Cons(head, tail) if head < 0 => f4(Cons(0, list))
    case Cons(head, tail) if head == 0 => f2(tail)
    case _ => f4(list)
  }

  def f4(list: List): List = list match {
    case Cons(head, tail) if head == 0 => f3(tail)
    case Cons(head, Cons(head2, Cons(head3, tail))) => tail
    case Cons(head, Cons(head2, tail)) => tail
    case Cons(head, tail) if head > 0 => f4(Cons(0, tail))
    case Cons(head, tail) => f4(tail)
    case _ => f1(list)
  }
}

// vim: set ts=4 sw=4 et:
