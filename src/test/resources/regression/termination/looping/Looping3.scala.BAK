import leon.lang._

object ComplexChains {
  
  abstract class List
  case class Cons(head: Int, tail: List) extends List
  case class Nil extends List

  def looping1(list: List): List = list match {
    case Cons(head, tail) if head > 0 => looping2(list)
    case Cons(head, tail) if head < 0 => looping3(list)
    case _ => looping4(Cons(1, list))
  }

  def looping2(list: List): List = list match {
    case Cons(head, tail) if head > 0 => looping1(tail)
    case _ => looping3(list)
  }

  def looping3(list: List): List = list match {
    case Cons(head, tail) if head < 0 => looping1(tail)
    case _ => looping2(list)
  }

  def looping4(list: List): List = list match {
    case Cons(_, Cons(_, tail)) => looping1(tail)
    case Cons(_, tail) => looping1(tail)
    case Nil() => looping2(Cons(1, Nil()))
  }
}

// vim: set ts=4 sw=4 et:
